/* -*- coding: utf-8 -*-
 * ----------------------------------------------------------------------
 * Copyright © 2009-2012, RedJack, LLC.
 * All rights reserved.
 *
 * Please see the LICENSE.txt file in this distribution for license
 * details.
 * ----------------------------------------------------------------------
 */

#include <libcork/core.h>

#include "ipset/bdd/nodes.h"
#include "ipset/ipset.h"
#include "../internal.h"


void
IPMAP_NAME(set_network)(struct ip_map *map, CORK_IP *elem,
                        unsigned int cidr_prefix, int value)
{
    ipset_node_id  elem_bdd;
    ipset_node_id  value_bdd;
    ipset_node_id  new_map_bdd;

    /* First, construct the BDD that represents this IP address — i.e.,
     * where each boolean variable is assigned TRUE or FALSE depending
     * on whether the corresponding bit is set in the address. */
    elem_bdd = IPSET_NAME(make_ip_bdd)(elem, cidr_prefix);

    /* Next, create a new constant BDD to represent the value. */
    value_bdd = ipset_node_cache_terminal(ipset_cache, value);

    /* Add elem to the map by constructing an if-then-else BDD.  If the
     * variables evaluate just like in elem_bdd (signifying that the
     * address is the same/in the same network), then we point to the
     * value_bdd to get the value of the function; otherwise we point at
     * the previous map's BDD.  This ensures that any previous values
     * that aren't overwritten by the new IP network address keep the
     * same value as before. */
    new_map_bdd = ipset_node_cache_ite
        (ipset_cache, elem_bdd, value_bdd, map->map_bdd);

    /* Store the map's new BDD into the map struct. */
    map->map_bdd = new_map_bdd;
}


void
IPMAP_NAME(set)(struct ip_map *map, CORK_IP *elem, int value)
{
    return IPMAP_NAME(set_network)(map, elem, IP_BIT_SIZE, value);
}
