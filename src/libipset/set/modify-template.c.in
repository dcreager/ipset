/* -*- coding: utf-8 -*-
 * ----------------------------------------------------------------------
 * Copyright © 2009-2012, RedJack, LLC.
 * All rights reserved.
 *
 * Please see the LICENSE.txt file in this distribution for license
 * details.
 * ----------------------------------------------------------------------
 */

#include <libcork/core.h>

#include "ipset/bdd/nodes.h"
#include "ipset/ipset.h"
#include "../internal.h"


bool
IPSET_NAME(add_network)(struct ip_set *set, CORK_IP *elem, unsigned int netmask)
{
    ipset_node_id  elem_bdd;
    ipset_node_id  new_set_bdd;
    bool  elem_already_present;

    /* First, construct the BDD that represents this IP address — i.e.,
     * where each boolean variable is assigned TRUE or FALSE depending
     * on whether the corresponding bit is set in the address. */
    elem_bdd = IPSET_NAME(make_ip_bdd)(elem, netmask);

    /* Add elem to the set by constructing the logical OR of the old set
     * and the new element's BDD. */
    new_set_bdd = ipset_node_cache_or(ipset_cache, set->set_bdd, elem_bdd);

    /* If the BDD representing the set hasn't changed, then the element
     * was already in the set. */
    elem_already_present = (new_set_bdd == set->set_bdd);

    /* Store the set's new BDD into the set struct. */
    set->set_bdd = new_set_bdd;
    return elem_already_present;
}


bool
IPSET_NAME(add)(struct ip_set *set, CORK_IP *elem)
{
    return IPSET_NAME(add_network)(set, elem, IP_BIT_SIZE);
}
