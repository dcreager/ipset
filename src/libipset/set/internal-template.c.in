/* -*- coding: utf-8 -*-
 * ----------------------------------------------------------------------
 * Copyright © 2009-2012, RedJack, LLC.
 * All rights reserved.
 *
 * Please see the LICENSE.txt file in this distribution for license
 * details.
 * ----------------------------------------------------------------------
 */

#include <libcork/core.h>

#include "ipset/bdd/nodes.h"
#include "ipset/ipset.h"
#include "ipset/logging.h"
#include "../internal.h"


/**
 * Return the BDD variable number for the given bit of an IP address.
 * IPv4 addresses use variables 1-32; IPv6 addresses use 1-128.
 * (Variable 0 is used to identify the kind of address — TRUE for
 * IPv4, FALSE for IPv6.)
 */

static ipset_variable
IPSET_NAME(var_for_bit)(unsigned int bit)
{
    return (bit + 1);
}


ipset_node_id
IPSET_NAME(make_ip_bdd)(CORK_IP *addr, unsigned int netmask)
{
    /* Special case — the BDD for a netmask that's out of range never
     * evaluates to true. */

    if ((netmask == 0) || (netmask > IP_BIT_SIZE)) {
        return ipset_node_cache_terminal(ipset_cache, false);
    }

    /* The end of the BDD node chain is the true terminal, indicating
     * that the address is in the set. */
    ipset_node_id  result =
        ipset_node_cache_terminal(ipset_cache, true);
    ipset_node_id  false_node =
        ipset_node_cache_terminal(ipset_cache, false);

    /* Since the BDD needs to be ordered, we have to iterate through the
     * IP address's bits in reverse order. */
    int  i;
    for (i = netmask-1; i >= 0; i--) {
        ipset_variable  var = IPSET_NAME(var_for_bit)(i);

        if (IPSET_BIT_GET(addr, i)) {
            /* The bit is set */
            DEBUG("Bit %d (variable %u) is SET", i, var);
            result = ipset_node_cache_nonterminal
                (ipset_cache, var, false_node, result);
        } else {
            /* The bit is not set */
            DEBUG("Bit %d (variable %u) is NOT set", i, var);
            result = ipset_node_cache_nonterminal
                (ipset_cache, var, result, false_node);
        }
    }

    /* Lastly, we set variable 0 to indicate whether this is an IPv4
     * address. */
    if (IP_DISCRIMINATOR_VALUE) {
        result = ipset_node_cache_nonterminal
            (ipset_cache, 0, false_node, result);
    } else {
        result = ipset_node_cache_nonterminal
            (ipset_cache, 0, result, false_node);
    }

    return result;
}
